import os
import re
import logging
import asyncio
import sqlite3
from datetime import datetime
from aiogram import Bot, types, Dispatcher, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ContentType
from aiogram import Router
from aiogram.filters import Command

TOKEN = "7722867235:AAGT3hHQUrPeORDcQQrNBFROXiGJ5pT9l2E"
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

bot = Bot(token=TOKEN)
router = Router()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ "data", –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists('data'):
    os.makedirs('data')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–ø–∫–µ "data"
db_path = os.path.join('data', 'finance.db')
conn = sqlite3.connect(db_path, check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS global_balances
               (id INTEGER PRIMARY KEY DEFAULT 1,
                rub_balance REAL DEFAULT 0,
                usd_balance REAL DEFAULT 0)''')
conn.commit()

cursor.execute(''' 
CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    timestamp TEXT,
    currency TEXT,
    amount REAL,
    type TEXT
)
''')
conn.commit()


def safe_add_column(column_name, column_type):
    try:
        cursor.execute(f"ALTER TABLE global_balances ADD COLUMN {column_name} {column_type}")
        conn.commit()
    except sqlite3.OperationalError:
        pass


safe_add_column("rub_transactions", "INTEGER DEFAULT 0")
safe_add_column("usd_transactions", "INTEGER DEFAULT 0")

# –ï–¥–∏–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚Äî –¥–≤–µ –∫–Ω–æ–ø–∫–∏: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å" –∏ "–°–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å"
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å")],
        [KeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å")],
    ],
    resize_keyboard=True
)


def get_balances():
    cursor.execute(
        "SELECT rub_balance, usd_balance, rub_transactions, usd_transactions FROM global_balances WHERE id=1"
    )
    result = cursor.fetchone()
    if not result:
        cursor.execute("INSERT INTO global_balances (id) VALUES (1)")
        conn.commit()
        return 0.0, 0.0, 0, 0
    rub, usd, rub_tx, usd_tx = result
    return rub or 0.0, usd or 0.0, rub_tx or 0, usd_tx or 0


def log_transaction(currency, amount, tx_type):
    cursor.execute(''' 
        INSERT INTO transactions (timestamp, currency, amount, type) 
        VALUES (?, ?, ?, ?)
    ''', (datetime.now().strftime('%Y-%m-%d %H:%M:%S'), currency, amount, tx_type))
    conn.commit()


def update_balances(new_rub, new_usd, inc_rub=False, inc_usd=False, rub_diff=0.0, usd_diff=0.0, tx_type=None):
    cursor.execute("SELECT rub_transactions, usd_transactions FROM global_balances WHERE id=1")
    rub_tx, usd_tx = cursor.fetchone()
    if inc_rub:
        rub_tx += 1
        log_transaction("‚ÇΩ", rub_diff, tx_type if tx_type is not None else ("income" if rub_diff > 0 else "spend"))
    if inc_usd:
        usd_tx += 1
        log_transaction("$", usd_diff, tx_type if tx_type is not None else ("income" if usd_diff > 0 else "spend"))
    cursor.execute(
        "UPDATE global_balances SET rub_balance=?, usd_balance=?, rub_transactions=?, usd_transactions=? WHERE id=1",
        (new_rub, new_usd, rub_tx, usd_tx)
    )
    conn.commit()


def reset_balances():
    cursor.execute(
        "UPDATE global_balances SET rub_balance=0, usd_balance=0, rub_transactions=0, usd_transactions=0 WHERE id=1"
    )
    cursor.execute("DELETE FROM transactions")
    conn.commit()


def process_message(text, current_rub, current_usd):
    text = re.sub(r'\([^)]*\)', '', text)
    text = re.sub(r'\b\d{1,2}[./]\d{1,2}\b', '', text)
    matches = re.findall(
        r'(\d+[\.,]?\d*)\s*([—Ä‚ÇΩ$])|([—Ä‚ÇΩ$])\s*(\d+[\.,]?\d*)',
        text,
        re.IGNORECASE
    )
    rub_change = 0.0
    usd_change = 0.0
    operation = -1 if any(word in text.lower() for word in ["–ø—Ä–∏–Ω—è–ª", "–∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ"]) else 1
    for match in matches:
        amount1, currency1, currency2, amount2 = match
        if amount1 and currency1:
            amount = amount1
            currency = currency1
        elif currency2 and amount2:
            amount = amount2
            currency = currency2
        else:
            continue
        try:
            value = float(amount.replace(',', '.'))
            value *= operation
            currency = currency.strip().lower()
            if currency in ['—Ä', '‚ÇΩ']:
                rub_change += value
            elif currency == '$':
                usd_change += value
        except ValueError:
            continue
    return current_rub + rub_change, current_usd + usd_change


def format_amount(value):
    formatted = f"{round(value, 2):.2f}"
    return formatted[:-3] if formatted.endswith(".00") else formatted


def get_balance_status(value):
    return "–Ø —Ç–µ–±–µ" if value > 0 else "–¢—ã –º–Ω–µ" if value < 0 else ""


def format_currency_line(current, diff, new, symbol):
    if diff == 0:
        return f"{get_balance_status(current)} {format_amount(current)}{symbol}".strip()

    action = "üòé–û–ø–ª–∞—Ç–∏–ª" if diff > 0 else "‚ù§Ô∏è–ü—Ä–∏–Ω—è–ª"
    sign = "+" if diff > 0 else "-"
    return (
        f"{get_balance_status(new)} {format_amount(new)}{symbol} ‚Üê "
        f"{format_amount(current)}{symbol} ({action} {sign}{format_amount(abs(diff))}{symbol})"
    ).strip()



@router.message(Command('start'))
async def start(message: types.Message):
    get_balances()
    await message.answer(
        "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "‚Ä¢ '–ü—Ä–∏–Ω—è–ª' –∏–ª–∏ '–ö–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–ª' ‚Äì —Å–ø–∏—Å–∞–Ω–∏–µ (–∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)\n"
        "‚Ä¢ –ë–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ‚Äì –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç—ã: 840‚ÇΩ, ‚ÇΩ840, 52.46$\n\n"
        "–ë–∞–ª–∞–Ω—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!",
        reply_markup=keyboard
    )


def generate_balance_report():
    rub, usd, _, _ = get_balances()
    balance_response = (
        f"üè¶ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:\n"
        f"{get_balance_status(rub)} {format_amount(rub)}‚ÇΩ\n"
        f"{get_balance_status(usd)} {format_amount(usd)}$\n\n"
    )

    cursor.execute("SELECT timestamp, currency, amount, type FROM transactions ORDER BY id DESC")
    rows = cursor.fetchall()

    rub_income, rub_spend, usd_income, usd_spend = [], [], [], []
    rub_comp, usd_comp = [], []

    rub_income_sum = rub_spend_sum = 0.0
    usd_income_sum = usd_spend_sum = 0.0
    rub_comp_sum = usd_comp_sum = 0.0

    for row in rows:
        _, currency, amount, tx_type = row
        formatted = f"{format_amount(abs(amount))}{currency}"

        if currency == "‚ÇΩ":
            if tx_type == "income":
                rub_spend.append(f"-{formatted}")  # "–ü—Ä–∏–Ω—è–ª" ‚Üí –º–∏–Ω—É—Å
                rub_spend_sum += abs(amount)
            elif tx_type == "spend":
                rub_income.append(f"+{formatted}")  # –û–±—ã—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚Üí –ø–ª—é—Å
                rub_income_sum += abs(amount)
            elif tx_type == "compensated":
                rub_comp.append(f"-{formatted}")  # –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –¥–ª—è —Ä—É–±–ª—è
                rub_comp_sum += abs(amount)
        elif currency == "$":
            if tx_type == "income":
                usd_spend.append(f"-{formatted}")
                usd_spend_sum += abs(amount)
            elif tx_type == "spend":
                usd_income.append(f"+{formatted}")
                usd_income_sum += abs(amount)
            elif tx_type == "compensated":
                usd_comp.append(f"-{formatted}")  # –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –¥–ª—è –¥–æ–ª–ª–∞—Ä–∞
                usd_comp_sum += abs(amount)

    def format_block(title, items, total, symbol):
        if not items:
            return f"{title} 0{symbol} : (—Ç—Ä–∞–Ω–∑ 0)"
        return f"{title} {format_amount(total)}{symbol} : (—Ç—Ä–∞–Ω–∑ {len(items)})\n   " + " ".join(items)

    history_aggregated = (
        "–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n\n" +
        format_block('‚ù§Ô∏è –ü—Ä–∏–Ω—è–ª (‚ÇΩ)', rub_spend, rub_spend_sum, '‚ÇΩ') + "\n" +
        format_block('üòé –û–ø–ª–∞—Ç–∏–ª (‚ÇΩ)', rub_income, rub_income_sum, '‚ÇΩ') + "\n" +
        format_block('‚ù§Ô∏è –ü—Ä–∏–Ω—è–ª ($)', usd_spend, usd_spend_sum, '$') + "\n" +
        format_block('üòé –û–ø–ª–∞—Ç–∏–ª ($)', usd_income, usd_income_sum, '$')
    )

    compensated_line = ""
    rub_comp_count = len(rub_comp)
    usd_comp_count = len(usd_comp)
    if rub_comp_count or usd_comp_count:
        compensated_parts = []
        if rub_comp_count:
            compensated_parts.append(f"{format_amount(rub_comp_sum)}‚ÇΩ (—Ç—Ä–∞–Ω–∑ {rub_comp_count})")
        if usd_comp_count:
            compensated_parts.append(f"{format_amount(usd_comp_sum)}$ (—Ç—Ä–∞–Ω–∑ {usd_comp_count})")
        compensated_line = "\n\n‚ù§Ô∏è –ö–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ " + " + ".join(compensated_parts)

    full_history_list = []
    for row in rows:
        _, currency, amount, _ = row
        sign = "+" if amount > 0 else "-"
        full_history_list.append(f"{sign}{format_amount(abs(amount))}{currency}")
    full_history = " ".join(full_history_list)

    return balance_response + history_aggregated + compensated_line + "\n\n–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n" + full_history





@router.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def check_balance(message: types.Message):
    report = generate_balance_report()
    await message.answer(report)


@router.message(F.text == "–°–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def reset_balance_handler(message: types.Message):
    report = generate_balance_report()
    await message.answer(report + "\n\n–ë–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω.")
    reset_balances()


@router.message(lambda message: (message.text or message.caption) is not None)
async def handle_text(message: types.Message):
    try:
        input_text = message.text if message.text else message.caption
        if not input_text:
            return

        text_lower = input_text.lower()
        if "–∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ" in text_lower:
            tx_type = "compensated"
        elif "–ø—Ä–∏–Ω—è–ª" in text_lower:
            tx_type = "income"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: "–ü—Ä–∏–Ω—è–ª" ‚Üí –¥–æ—Ö–æ–¥
        else:
            tx_type = "spend"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ–±—ã—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚Üí —Ä–∞—Å—Ö–æ–¥

        text_clean = re.sub(r'\([^)]*\)', '', input_text)
        matches = re.findall(
            r'(\d+[\.,]?\d*)\s*([—Ä‚ÇΩ$])|([—Ä‚ÇΩ$])\s*(\d+[\.,]?\d*)',
            text_clean,
            re.IGNORECASE
        )
        if not matches:
            await message.answer("‚ùå –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–∞–ª—é—Ç.")
            return
        found = sum(1 for match in matches if match[0] or match[2])
        if found > 1:
            raise ValueError("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–ª—é—Ç –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
        current_rub, current_usd, _, _ = get_balances()
        new_rub, new_usd = process_message(input_text, current_rub, current_usd)
        if new_rub == current_rub and new_usd == current_usd:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É.")
            return
        rub_line = format_currency_line(current_rub, new_rub - current_rub, new_rub, "‚ÇΩ")
        usd_line = format_currency_line(current_usd, new_usd - current_usd, new_usd, "$")
        update_balances(
            new_rub, new_usd,
            inc_rub=(new_rub != current_rub),
            inc_usd=(new_usd != current_usd),
            rub_diff=(new_rub - current_rub),
            usd_diff=(new_usd - current_usd),
            tx_type=tx_type
        )
        await message.answer(f"{rub_line}\n{usd_line}")
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        logging.error(f"Text error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")


async def main():
    dp = Dispatcher()
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    finally:
        conn.close()
